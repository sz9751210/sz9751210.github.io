<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>elk on 艾倫的程式之旅</title>
    <link>https://sz9751210.github.io/tags/elk/</link>
    <description>Recent content in elk on 艾倫的程式之旅</description>
    <image>
      <url>https://sz9751210.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://sz9751210.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 17 Oct 2022 10:20:00 +0000</lastBuildDate><atom:link href="https://sz9751210.github.io/tags/elk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>喬叔帶你上手Elastic Stack：Elasticsearch的最佳實踐與最佳化技巧</title>
      <link>https://sz9751210.github.io/posts/%E5%96%AC%E5%8F%94%E5%B8%B6%E4%BD%A0%E4%B8%8A%E6%89%8Belastic-stackelasticsearch%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90%E8%88%87%E6%9C%80%E4%BD%B3%E5%8C%96%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 17 Oct 2022 10:20:00 +0000</pubDate>
      
      <guid>https://sz9751210.github.io/posts/%E5%96%AC%E5%8F%94%E5%B8%B6%E4%BD%A0%E4%B8%8A%E6%89%8Belastic-stackelasticsearch%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90%E8%88%87%E6%9C%80%E4%BD%B3%E5%8C%96%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;讀後心得&#34;&gt;📚讀後心得&lt;/h2&gt;
&lt;p&gt;當初在研究Elastic Stack，ILM這部份還不熟時，剛好搜尋到喬叔的鐵人賽文章，閱讀時彷彿挖到了寶，對於Index的管理講解得非常透徹，從Index如何被建立，使用Template以及Alias，再到導入ILM以及搭配Rollover以及Shrink等方式達到索引、搜尋、儲存等最佳化，一步一步穩定順利的完成，真的很感動。&lt;/p&gt;
&lt;p&gt;之前使用Elastic Stack並沒有使用到ILM的配置，所以單個Index可能會超過官方建議的大小，並且使用的是以一天為單位，但實務上並非每個服務都是固定的大小，因此導入ILM對於整體的效能會有更好的幫助，並且使用三溫暖架構，讓最新的log都放在效能較好的機器上，較舊的log則隨著自定義的時間轉移到效能較差的機器上，讓搜尋能有更好的體驗。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ANSIBLE-ELK</title>
      <link>https://sz9751210.github.io/posts/ansible-elk/</link>
      <pubDate>Mon, 17 Oct 2022 09:57:00 +0000</pubDate>
      
      <guid>https://sz9751210.github.io/posts/ansible-elk/</guid>
      <description>&lt;h2 id=&#34;心得&#34;&gt;📔心得&lt;/h2&gt;
&lt;p&gt;上次使用docker建立起ELK-stack，最近剛好在研究ansible，所以也寫了一下使用playbook的方式建立起ELK-stack。&lt;/p&gt;
&lt;p&gt;撰寫的過程中，先從官方文件查看安裝流程，接著再去找ansible相對應的module，在目錄結構的劃分也學習到了不少，從一開始只有一個main.yml慢慢獨立出來有一個根目錄的yml再去include task，並學會如何使用template以及vars。&lt;/p&gt;
&lt;p&gt;在撰寫template時，使用到了jinja2語法，直接可以套用vars，讓我的template複製進去就都載入好我要的參數，並且可以依照我的inventory動態設定我的參數，真的有夠強大。&lt;/p&gt;
&lt;p&gt;最後要感謝凍仁大的ansible教程，許多學習資訊都是從凍仁大的ansible git book學到的，會把網址放在下面，有興趣的可以去參考一下，寫得很簡潔明瞭，讓新手也能很快上手，尤其是使用docker-compose就能練習ansible的部份，使用jupyter notebook下去跑ansible module有夠方便。&lt;/p&gt;
&lt;p&gt;🔗凍仁大ansible指南 &amp;ndash;&amp;gt; &lt;a href=&#34;https://chusiang.gitbooks.io/automate-with-ansible/content/&#34;&gt;現代 IT 人一定要知道的 Ansible 自動化組態技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔗Ansible-ELK repo &amp;ndash;&amp;gt; &lt;a href=&#34;https://github.com/sz9751210/ansible-elk&#34;&gt;Ansible-ELK&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;簡介&#34;&gt;👨‍💻簡介&lt;/h2&gt;
&lt;p&gt;在gcp環境下使用ansible playbook 建立elk stack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elasticsearch：主要會先需要先跑init master，接著再去跑seed host去加入master組成cluster架構，邏輯上還有可修改的地方，目前先以兩份yaml分開跑下去做建立，在跑完init master後會先建立iim以及index template&lt;/li&gt;
&lt;li&gt;logstash：直接將pipeline等設定都複製進去&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ELFK-stack-monitor</title>
      <link>https://sz9751210.github.io/posts/elfk-stack-monitor/</link>
      <pubDate>Sun, 03 Jul 2022 19:41:00 +0000</pubDate>
      
      <guid>https://sz9751210.github.io/posts/elfk-stack-monitor/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;心得&#34;&gt;📔心得&lt;/h2&gt;
&lt;p&gt;因最近在研究elk-stack，藉此紀錄一下使用docker-compose建立起elk-stack的架構，在建立的過程中，比較多遇到的是記憶體使用率的配置不足，導致容器無法成功啟動，或是config檔權限的問題，因此在filebeat的部分會直接把config檔放進去並改成root權限。&lt;/p&gt;
&lt;p&gt;之後希望能再增加logstash的pipeline功能，在實務上可多個服務做篩選，以及elasticsearch的資料安全性配置SSL和叢集架構，並導入ILM做log的空間管理。&lt;/p&gt;
&lt;p&gt;監控的部分則是拿之前做的小專案直接套用並呈現，所以整體流程大致上差不多，多了個elasticsearch_exporter，可查看更多elasticsearch的整體狀況，例如index、shard的數量，資料大小，寫入速率等等。&lt;/p&gt;
&lt;p&gt;🔗詳細專案位置 &amp;ndash;&amp;gt; &lt;a href=&#34;https://github.com/sz9751210/ELFK-stack-monitor&#34;&gt;ELFK-stack-monitor&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;簡介&#34;&gt;👨‍💻簡介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;🔰ELFK-stack：使用docker-compose建立起elk-stack的架構，主要先從alpine產生假資料並存到filebeat讀取的資料夾，接著filebeat將資料送往logstash，在實務上，會在logstash做filter的功能(未來會新增)，接著送到elasticsearch存起來，並透過kibana的ui下去做搜尋所需的log資料。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🔰Monitor：使用cadvisor監控所有容器以及elasticsearch_exporter監控elasticsearch的狀態，並把資料送到prometheus儲存起來，最後透過grafana的ui呈現。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
